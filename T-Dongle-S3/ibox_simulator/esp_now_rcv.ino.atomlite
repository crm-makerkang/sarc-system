// for ESP32 like Atom-lite
#include "Arduino.h"
#include "WiFi.h"
#include <EEPROM.h>
#include <esp_now.h>


// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

// Structure example to send data
// typedef struct struct_message {
//   char a[32];
//   int b;
//   float c;
//   String d;
//   bool e;
// } struct_message;
typedef struct struct_message
{
  int x;
  int y;
} struct_message;

// Create a struct_message called broadcast_data
struct_message broadcast_data;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&broadcast_data, incomingData, sizeof(broadcast_data));
  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("x: ");
  Serial.println(broadcast_data.x);
  Serial.print("y: ");
  Serial.println(broadcast_data.y);
  Serial.println();
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(9600);
 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  Serial.println(WiFi.macAddress());


  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  
  // Register peer
  esp_now_peer_info_t peerInfo;
  peerInfo.ifidx = WIFI_IF_STA;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
}
 
void loop() {
  // Set values to send
  // strcpy(broadcast_data.a, "THIS IS A CHAR");
  // broadcast_data.b = random(1,20);
  // broadcast_data.c = 1.2;
  // broadcast_data.d = "Hello";
  // broadcast_data.e = false;

  // // Send message via ESP-NOW
  // esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &broadcast_data, sizeof(broadcast_data));
   
  // if (result == ESP_OK) {
  //   Serial.println("Sent with success");
  // }
  // else {
  //   Serial.println("Error sending the data");
  //   Serial.print("error code is : ");
  //   Serial.println(result);
  // }
  // delay(2000);
}